AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creates the following resources:
    - An S3 bucket for the Remix website
    - A CloudFront for serving the static assets
    - A CodeBuild for building the website
    - A CodePipeline for deploying the website
    - A Lambda@Edge to handle default indexes at non-root locations

Parameters:
  OAuthToken:
    Type: String
    NoEcho: true
    Description: An oAuth token with access to the Remix repository

  RemixCertificateArn:
    Type: String
    Description: The ARN of the SSL Certificate for Remix

  FQDN:
    Type: String
    Description: The desired FQDN of the website

  EnvType:
    Type: String
    Description: The type of environment to create.
    Default: dev
    AllowedValues:
      - dev
      - prod
    ConstraintDescription: must specify prod or dev.

Mappings:
  CacheSettings:
    dev:
      DefaultTTL: 0
    prod:
      DefaultTTL: 86400

Resources:

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub Static assets in ${AWS::StackName}

  RemixWebBucket:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref RemixLogBucket
        LogFilePrefix: !If
          - NoFQDN
          - !Sub s3/${AWS::StackName}/
          - !Sub s3/${FQDN}/

  RemixWebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: OriginAccessIdentity
    Properties:
      Bucket: !Ref RemixWebBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Join
              - ""
              - - !GetAtt RemixWebBucket.Arn
                - "/*"
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  RemixDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: OriginAccessIdentity
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate: !If
          - NoSSL
          - !Ref AWS::NoValue
          - AcmCertificateArn: !Ref RemixCertificateArn
            MinimumProtocolVersion: TLSv1.1_2016
            SslSupportMethod: sni-only
        Comment: !If
          - NoFQDN
          - !Ref AWS::NoValue
          - !Ref FQDN
        Aliases: !If
          - NoFQDN
          - !Ref AWS::NoValue
          - - !Ref FQDN
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          Compress: true
          DefaultTTL: !FindInMap [CacheSettings, !Ref EnvType, "DefaultTTL"]
          ViewerProtocolPolicy: !If
            - NoSSL
            - allow-all
            - redirect-to-https
          TargetOriginId: Bucket
          LambdaFunctionAssociation:
            - EventType: origin-request
            - LambdaFunctionARN: !Join
              - ":"
              - - !Ref DefaultDirectoryIndexLambda
                - !GetAtt DefaultDirectoryIndexLambdaV1.Version
        Origins:
          - Id: Bucket
            DomainName: !GetAtt RemixWebBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - /
                - - origin-access-identity
                  - cloudfront
                  - !Ref OriginAccessIdentity
        Logging:
          # This should result in "logbucketname.s3.amazonaws.com", where "logbucketname" is the value from an export
          # named "InfrastructureStackName:LogBucket"
          Bucket: !Join
            - .
            - - !Ref RemixLogBucket
              - s3
              - !Ref AWS::URLSuffix
          Prefix: !If
            - NoFQDN
            - !Sub web/${AWS::StackName}/
            - !Sub web/${FQDN}/
          IncludeCookies: true

  RemixLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: Suspended
      LifecycleConfiguration:
        Rules:
        - Status: Enabled
          ExpirationInDays: 3653
          NoncurrentVersionExpirationInDays: 1

  SharedLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join [ '-', [ !Ref 'AWS::StackName', 'LogGroup']]

  RemixCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "TrustPolicyAllowCodeBuildToAssume"
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        -
          PolicyName: "AllowCloudWatchLogsForCodeBuild"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action: logs:*
                Effect: Allow
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/codebuild/*
                  - arn:aws:logs:*:*:log-group:/aws/codebuild/*:*:*
        -
          PolicyName: "AllowCodeBuildtoGetS3"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !GetAtt RemixCodeS3Bucket.Arn
                  - Fn::Join:
                      - ""
                      -
                        - !GetAtt RemixCodeS3Bucket.Arn
                        - "/*"
        -
          PolicyName: "AllowCodebuildtoWritetoProdBucket"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:ListObjects
                Resource:
                  - !GetAtt RemixWebBucket.Arn
                  - Fn::Join:
                      - ""
                      -
                        - !GetAtt RemixWebBucket.Arn
                        - "/*"


  RemixBuilder:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: remix_build_codepipeline
      Description: 'Build and Deploy Remix'
      ServiceRole: !Ref RemixCodeBuildRole
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        Location: 'https://github.com/ndlib/remix.git'
        GitCloneDepth: 1
        BuildSpec: |
          version: 0.1
          phases:
            post_build:
              commands:
                - aws s3 cp --recursive ./ s3://$DEST_BUCKET/ --exclude "./Jenkinsfile" --exclude "./README.md"
          artifacts:
            type: zip
            files:
              - ./index.html
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        EnvironmentVariables:
          - Name: DEST_BUCKET
            Value: !Ref RemixWebBucket


  RemixCodeS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  RemixCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "TrustPolicyAllowCodePipelineToAssume"
            Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "CodePipelineWriteToS3"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !GetAtt RemixCodeS3Bucket.Arn
                  - Fn::Join:
                      - ""
                      -
                        - !GetAtt RemixCodeS3Bucket.Arn
                        - "/*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:ListObject
                Resource:
                  - !GetAtt RemixWebBucket.Arn
                  - Fn::Join:
                      - ""
                      -
                        - !GetAtt RemixWebBucket.Arn
                        - "/*"
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !GetAtt RemixBuilder.Arn

  RemixCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref RemixCodeS3Bucket
        Type: S3
      RoleArn: !GetAtt RemixCodePipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: "RetrieveSourceCode"
              ActionTypeId:
                Owner: ThirdParty
                Category: Source
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: ndlib
                Repo: remix
                Branch: master
                OAuthToken: !Ref OAuthToken
              OutputArtifacts:
                - Name: SourceCode
        -
          Name: Build
          Actions:
            -
              Name: "BuildAndDeploy"
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuiltCode
              ActionTypeId:
                Owner: AWS
                Category: Build
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref RemixBuilder
  # Creates a role that allows lambda basic execution, but can be assumed
  # by edge services.
  # Reference https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-edge-permissions.html
  LambdaEdgeBasicExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Adds / to a request with no extension and redirects directory requests to
  # the index.html within that directory.
  # Note: This will not work for directories that have a '.' in the name
  DefaultDirectoryIndexLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: >
          'use strict';
          exports.handler = (event, context, callback) => {
              var request = event.Records[0].cf.request;
              var olduri = request.uri;
              var newuri = olduri.replace(/^.*\/([^.|^\/]+)$/, olduri + '/');
              newuri = newuri.replace(/\/$/, '\/index.html');
              request.uri = newuri;
              return callback(null, request);
          }
      Description: Basic rewrite rule to send directory requests such as */ to */index.html
      Handler: index.handler
      Role: !GetAtt LambdaEdgeBasicExecutionRole.Arn
      Runtime: nodejs8.10

  DefaultDirectoryIndexLambdaV1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref DefaultDirectoryIndexLambda
      Description: Initial version



Outputs:
  # I'd love to just use a constant name to make it easier to reference the current lambda in cloudfront, ex:
  #   lambda-edge-default-directory-index:3
  # but given the complexity of deleting a lambda that has been replicated by cloudfront,
  # this would make it really complicated to delete this stack or create a new one as a replacement.
  # So, for now, just going to export the ARN to the function so that others can reference the export.
  # If this eventually stabilizes we can revisit using a global name.
  DefaultDirectoryIndexLambdaArn:
    Description: The ARN to the current supported Lambda@Edge function for mapping directory requests to an index.html within the directory
    Value: !GetAtt DefaultDirectoryIndexLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}:DefaultDirectoryIndexLambdaArn"

  LambdaEdgeBasicExecutionRoleName:
    Description: Name of a role that allows lambda basic execution and can be assumed by edge services.
    Value: !Ref LambdaEdgeBasicExecutionRole
    Export:
      Name: !Sub "${AWS::StackName}:LambdaEdgeBasicExecutionRoleName"

Conditions:

  NoFQDN: !Equals
    - !Ref FQDN
    - ''

  NoSSL: !Equals
    - !Ref RemixCertificateArn
    - ''
